{"version":3,"sources":["assets/images/2020.jpg","Pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","Container","className","Row","Col","sm","md","xs","src","profileImg","alt","options","strings","autoStart","loop","target","rel","href","icon","faInstagram","size","faLinkedin","faGithub","faFlickr","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,6SC2BtBC,E,uKAGb,OAEI,6BACI,kBAACC,EAAA,EAAD,CAAWC,UAAU,aACjB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,IACpB,uBAAGL,UAAU,QACT,yBAAKA,UAAU,aAAaM,IAAKC,IAAYC,IAAI,oBAGzD,kBAACN,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,IACpB,yBAAKL,UAAU,aACX,wBAAIA,UAAU,eAEV,kBAAC,IAAD,CACIS,QAAS,CACLC,QAAS,CAAC,OAAO,QAAS,OAAQ,QAAS,UAAU,UACrDC,WAAW,EACXC,MAAM,MAKlB,wBAAIZ,UAAU,aAAd,OAA8B,uBAAGA,UAAU,YAAb,IAxCjD,kBAwCiD,MAC9B,wBAAIA,UAAU,oBAAd,IAxCjB,oDAwCiB,QAIZ,6BACA,6BACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACrB,yBAAKL,UAAU,cACX,uBAAGa,OAAO,SAASC,IAAI,sBAAsBd,UAAU,YAAYe,KAhDxF,8CAgDkG,kBAAC,IAAD,CAAiBC,KAAMC,IAAaC,KAAK,OAAtH,KACA,uBAAGL,OAAO,SAASC,IAAI,sBAAsBd,UAAU,YAAYe,KAhDlF,+CAgDkG,kBAAC,IAAD,CAAiBC,KAAMG,IAAYD,KAAK,OAA3H,KACA,uBAAGL,OAAO,SAASC,IAAI,sBAAsBd,UAAU,YAAYe,KAhDpF,qCAgDkG,kBAAC,IAAD,CAAiBC,KAAMI,IAAUF,KAAK,OAAvH,KACA,uBAAGL,OAAO,SAASC,IAAI,sBAAsBd,UAAU,YAAYe,KAhDpF,gDAgDkG,kBAAC,IAAD,CAAiBC,KAAMK,IAAUH,KAAK,OAAvH,SAMhB,4BAAQlB,UAAU,eAnDjB,+B,GAMiBsB,aCfnBC,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCKcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bc7ac359.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/2020.53db857c.jpg\";","import React, { Component } from 'react'\nimport { Container, Col, Row } from 'react-bootstrap'\nimport profileImg from '../assets/images/2020.jpg'\nimport '../assets/CSS/home.css'\n\n// fontawesome imports\nimport { faHome } from \"@fortawesome/free-solid-svg-icons\";\nimport { fab, faLinkedin, faGithub, faInstagram, faFlickr, faSpotify } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Typewriter from 'typewriter-effect';\n\n\n/* YOUR DATA HERE ---------------------------------------------- */\nconst name = \"Andrea Fontalvo\";\nconst descrp = \"Electronics engineer, tech and podcast enthusiast\";\nconst ig = \"https://www.instagram.com/andreacfontalvo/\";\nconst linkedin = \"https://www.linkedin.com/in/andreafontalvo/\";\nconst github = \"https://github.com/andreafontalvo\";\nconst flickr = \"https://www.flickr.com/photos/andreafontalvo\";\n/*const profileLink = \"http://andreafontalvo.com/about\"; */\n\nvar footerText = \"Made with ðŸ’œ\";\n\n// eslint-disable-next-line\n\n/* ------------------------------------------------------------------- */\n\nexport default class Home extends Component {\n\n    render() {\n        return (\n\n            <div>\n                <Container className=\"container\">\n                    <Row>\n                        <Col sm={12} md={5} xs={12}>\n                            <a className=\"link\">\n                                <img className=\"circle-img\" src={profileImg} alt=\"profile-image\" />\n                            </a>\n                        </Col>\n                        <Col sm={12} md={7} xs={12}>\n                            <div className=\"text-cont\">\n                                <h1 className=\"salute-text\">\n\n                                    <Typewriter\n                                        options={{\n                                            strings: ['Hola','Hello', 'Ciao', 'Hallo', 'Bonjour','AjÃ¡'],\n                                            autoStart: true,\n                                            loop: true                                           \n                                        }}\n                                    />\n\n                                </h1>\n                                <h1 className=\"name-text\">I'm <b className=\"name-box\"> {name} </b></h1>\n                                <h3 className=\"description-text\"> {descrp} </h3>\n                            </div>\n                        </Col>\n                    </Row>\n                    <br />\n                    <br />\n                    <Row>\n                        <Col sm={12} md={12} xs={12}>\n                            <div className=\"links-cont\">\n                                <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"link-icon\" href={ig}><FontAwesomeIcon icon={faInstagram} size=\"2x\" /> </a>\n                                <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"link-icon\" href={linkedin}><FontAwesomeIcon icon={faLinkedin} size=\"2x\"/> </a>\n                                <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"link-icon\" href={github}><FontAwesomeIcon icon={faGithub} size=\"2x\" /> </a>\n                                <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"link-icon\" href={flickr}><FontAwesomeIcon icon={faFlickr} size=\"2x\" /> </a>\n                            </div>\n                        </Col>\n                    </Row>\n                </Container>\n\n                <footer className=\"footer-text\">\n                    {footerText}\n                </footer>\n            </div>\n\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Home from './Pages/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}